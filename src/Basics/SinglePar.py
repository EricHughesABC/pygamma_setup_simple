# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_SinglePar')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_SinglePar')
    _SinglePar = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SinglePar', [dirname(__file__)])
        except ImportError:
            import _SinglePar
            return _SinglePar
        try:
            _mod = imp.load_module('_SinglePar', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _SinglePar = swig_import_helper()
    del swig_import_helper
else:
    import _SinglePar
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SinglePar.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _SinglePar.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SinglePar.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SinglePar.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SinglePar.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SinglePar.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SinglePar.SwigPyIterator_copy(self)

    def next(self):
        return _SinglePar.SwigPyIterator_next(self)

    def __next__(self):
        return _SinglePar.SwigPyIterator___next__(self)

    def previous(self):
        return _SinglePar.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SinglePar.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SinglePar.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SinglePar.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SinglePar.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SinglePar.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SinglePar.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SinglePar.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _SinglePar.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ParameterSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterSet, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(ParameterSet self) -> ParameterSet"""
        this = _SinglePar.new_ParameterSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SinglePar.delete_ParameterSet
    __del__ = lambda self: None
ParameterSet_swigregister = _SinglePar.ParameterSet_swigregister
ParameterSet_swigregister(ParameterSet)
cvar = _SinglePar.cvar
GamSParInit = cvar.GamSParInit
GamIntVecInit = cvar.GamIntVecInit

class SinglePar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SinglePar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SinglePar, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _SinglePar.new_SinglePar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SinglePar.delete_SinglePar
    __del__ = lambda self: None

    def __assign__(self, par):
        return _SinglePar.SinglePar___assign__(self, par)

    def SPerror(self, eidx, noret=0):
        return _SinglePar.SinglePar_SPerror(self, eidx, noret)

    def SPfatality(self, eidx):
        return _SinglePar.SinglePar_SPfatality(self, eidx)

    def setCoord(self, input):
        return _SinglePar.SinglePar_setCoord(self, input)

    def data(self, *args):
        return _SinglePar.SinglePar_data(self, *args)

    def type(self, *args):
        return _SinglePar.SinglePar_type(self, *args)

    def name(self, *args):
        return _SinglePar.SinglePar_name(self, *args)

    def state(self, *args):
        return _SinglePar.SinglePar_state(self, *args)

    def GetNS(self, name, state):
        return _SinglePar.SinglePar_GetNS(self, name, state)

    def parse(self, *args):
        return _SinglePar.SinglePar_parse(self, *args)

    def printStrings(self):
        return _SinglePar.SinglePar_printStrings(self)

    def __eq__(self, par):
        return _SinglePar.SinglePar___eq__(self, par)

    def __ne__(self, par):
        return _SinglePar.SinglePar___ne__(self, par)

    def __lt__(self, par):
        return _SinglePar.SinglePar___lt__(self, par)

    def __gt__(self, par):
        return _SinglePar.SinglePar___gt__(self, par)
SinglePar_swigregister = _SinglePar.SinglePar_swigregister
SinglePar_swigregister(SinglePar)

class Isotope(_object):
    """Proxy of C++ Isotope class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Isotope, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Isotope, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Isotope self) -> Isotope
        __init__(Isotope self, Isotope I) -> Isotope
        __init__(Isotope self, std::string const & I) -> Isotope
        """
        this = _SinglePar.new_Isotope(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SinglePar.delete_Isotope
    __del__ = lambda self: None

    def qn(self):
        """qn(Isotope self) -> double"""
        return _SinglePar.Isotope_qn(self)


    def HS(self):
        """HS(Isotope self) -> int"""
        return _SinglePar.Isotope_HS(self)


    def momentum(self):
        """momentum(Isotope self) -> std::string"""
        return _SinglePar.Isotope_momentum(self)


    def symbol(self):
        """symbol(Isotope self) -> std::string const &"""
        return _SinglePar.Isotope_symbol(self)


    def name(self):
        """name(Isotope self) -> std::string const &"""
        return _SinglePar.Isotope_name(self)


    def element(self):
        """element(Isotope self) -> std::string const &"""
        return _SinglePar.Isotope_element(self)


    def number(self):
        """number(Isotope self) -> int"""
        return _SinglePar.Isotope_number(self)


    def mass(self):
        """mass(Isotope self) -> int"""
        return _SinglePar.Isotope_mass(self)


    def weight(self):
        """weight(Isotope self) -> double"""
        return _SinglePar.Isotope_weight(self)


    def gamma(self):
        """gamma(Isotope self) -> double"""
        return _SinglePar.Isotope_gamma(self)


    def receptivity(self):
        """receptivity(Isotope self) -> double"""
        return _SinglePar.Isotope_receptivity(self)


    def relative_frequency(self):
        """relative_frequency(Isotope self) -> double"""
        return _SinglePar.Isotope_relative_frequency(self)


    def electron(self):
        """electron(Isotope self) -> bool"""
        return _SinglePar.Isotope_electron(self)


    def read(self, *args):
        """
        read(Isotope self, std::string const & filename, int idx=-1, int warn=2) -> bool
        read(Isotope self, std::string const & filename, int idx=-1) -> bool
        read(Isotope self, std::string const & filename) -> bool
        read(Isotope self, ParameterSet pset, int idx=-1, int warn=2) -> bool
        read(Isotope self, ParameterSet pset, int idx=-1) -> bool
        read(Isotope self, ParameterSet pset) -> bool
        """
        return _SinglePar.Isotope_read(self, *args)


    def printStrings(self, hdr=True):
        """
        printStrings(Isotope self, bool hdr=True) -> std::vector< std::string,std::allocator< std::string > >
        printStrings(Isotope self) -> std::vector< std::string,std::allocator< std::string > >
        """
        return _SinglePar.Isotope_printStrings(self, hdr)


    def seek(self, ID):
        """seek(Isotope self, IsotopeData ID) -> int"""
        return _SinglePar.Isotope_seek(self, ID)


    def exists(self, symbol):
        """exists(Isotope self, std::string const & symbol) -> bool"""
        return _SinglePar.Isotope_exists(self, symbol)


    def known(symbol):
        """known(std::string const & symbol) -> bool"""
        return _SinglePar.Isotope_known(symbol)

    known = staticmethod(known)

    def size():
        """size() -> int"""
        return _SinglePar.Isotope_size()

    size = staticmethod(size)

    def PrintListStrings():
        """PrintListStrings() -> std::vector< std::string,std::allocator< std::string > >"""
        return _SinglePar.Isotope_PrintListStrings()

    PrintListStrings = staticmethod(PrintListStrings)

    def AddIsotope(ID, warn=2):
        """
        AddIsotope(IsotopeData ID, int warn=2) -> bool
        AddIsotope(IsotopeData ID) -> bool
        """
        return _SinglePar.Isotope_AddIsotope(ID, warn)

    AddIsotope = staticmethod(AddIsotope)

    def __eq__(self, I):
        """__eq__(Isotope self, Isotope I) -> bool"""
        return _SinglePar.Isotope___eq__(self, I)


    def __ne__(self, I):
        """__ne__(Isotope self, Isotope I) -> bool"""
        return _SinglePar.Isotope___ne__(self, I)


    def __lt__(self, I):
        """__lt__(Isotope self, Isotope I) -> bool"""
        return _SinglePar.Isotope___lt__(self, I)


    def __gt__(self, I):
        """__gt__(Isotope self, Isotope I) -> bool"""
        return _SinglePar.Isotope___gt__(self, I)


    def nepair(self, S):
        """nepair(Isotope self, Isotope S) -> bool"""
        return _SinglePar.Isotope_nepair(self, S)


    def enpair(self, S):
        """enpair(Isotope self, Isotope S) -> bool"""
        return _SinglePar.Isotope_enpair(self, S)


    def eepair(self, S):
        """eepair(Isotope self, Isotope S) -> bool"""
        return _SinglePar.Isotope_eepair(self, S)


    def nnpair(self, S):
        """nnpair(Isotope self, Isotope S) -> bool"""
        return _SinglePar.Isotope_nnpair(self, S)



    def __str__(self):
        """Prints out Isotope"""

        sss = ""
        for v in self.printStrings():
            sss += str(v) + '\n'

        return (sss)


Isotope_swigregister = _SinglePar.Isotope_swigregister
Isotope_swigregister(Isotope)

def Isotope_known(symbol):
    """Isotope_known(std::string const & symbol) -> bool"""
    return _SinglePar.Isotope_known(symbol)

def Isotope_size():
    """Isotope_size() -> int"""
    return _SinglePar.Isotope_size()

def Isotope_PrintListStrings():
    """Isotope_PrintListStrings() -> std::vector< std::string,std::allocator< std::string > >"""
    return _SinglePar.Isotope_PrintListStrings()

def Isotope_AddIsotope(ID, warn=2):
    """
    AddIsotope(IsotopeData ID, int warn=2) -> bool
    Isotope_AddIsotope(IsotopeData ID) -> bool
    """
    return _SinglePar.Isotope_AddIsotope(ID, warn)

PI = _SinglePar.PI
PI2 = _SinglePar.PI2

def query_parameter(*args):
    """
    query_parameter(int argc, char *[] argv, int par, std::string const & Q, std::string & V)
    query_parameter(int argc, char *[] argv, int par, std::string const & Q, double & V)
    query_parameter(int argc, char *[] argv, int par, std::string const & Q, int & V)
    """
    return _SinglePar.query_parameter(*args)

def ask_set(*args):
    """
    ask_set(int argc, char *[] argv, int par, std::string const & Q, std::string & V) -> bool
    ask_set(int argc, char *[] argv, int par, std::string const & Q, double & V) -> bool
    ask_set(int argc, char *[] argv, int par, std::string const & Q, int & V) -> bool
    """
    return _SinglePar.ask_set(*args)

def GAMMAerror(*args):
    """
    GAMMAerror(std::string const & hdr, std::string const & msg, int noret=0)
    GAMMAerror(std::string const & hdr, std::string const & msg)
    GAMMAerror(std::string const & hdr, int eidx, int noret=0)
    GAMMAerror(std::string const & hdr, int eidx)
    GAMMAerror(std::string const & hdr, int eidx, std::string const & pname, int noret=0)
    GAMMAerror(std::string const & hdr, int eidx, std::string const & pname)
    """
    return _SinglePar.GAMMAerror(*args)

def GAMMAfatal():
    """GAMMAfatal() -> void volatile"""
    return _SinglePar.GAMMAfatal()
class IsotopeData(_object):
    """Proxy of C++ IsotopeData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsotopeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IsotopeData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IsotopeData self) -> IsotopeData
        __init__(IsotopeData self, IsotopeData data) -> IsotopeData
        __init__(IsotopeData self, int HS_, std::string const & symb_, std::string const & name_, std::string element_, int number_, int mass_, double weight_, double recept_, double rel_freq_, bool is_electron_=False) -> IsotopeData
        __init__(IsotopeData self, int HS_, std::string const & symb_, std::string const & name_, std::string element_, int number_, int mass_, double weight_, double recept_, double rel_freq_) -> IsotopeData
        __init__(IsotopeData self, std::string const & symbol_) -> IsotopeData
        """
        this = _SinglePar.new_IsotopeData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __assign__(self, ID1):
        """__assign__(IsotopeData self, IsotopeData ID1) -> IsotopeData"""
        return _SinglePar.IsotopeData___assign__(self, ID1)

    __swig_destroy__ = _SinglePar.delete_IsotopeData
    __del__ = lambda self: None

    def qn(self):
        """qn(IsotopeData self) -> double"""
        return _SinglePar.IsotopeData_qn(self)


    def HS(self):
        """HS(IsotopeData self) -> int"""
        return _SinglePar.IsotopeData_HS(self)


    def momentum(self):
        """momentum(IsotopeData self) -> std::string"""
        return _SinglePar.IsotopeData_momentum(self)


    def symbol(self):
        """symbol(IsotopeData self) -> std::string const &"""
        return _SinglePar.IsotopeData_symbol(self)


    def name(self):
        """name(IsotopeData self) -> std::string const &"""
        return _SinglePar.IsotopeData_name(self)


    def element(self):
        """element(IsotopeData self) -> std::string const &"""
        return _SinglePar.IsotopeData_element(self)


    def number(self):
        """number(IsotopeData self) -> int"""
        return _SinglePar.IsotopeData_number(self)


    def mass(self):
        """mass(IsotopeData self) -> int"""
        return _SinglePar.IsotopeData_mass(self)


    def weight(self):
        """weight(IsotopeData self) -> double"""
        return _SinglePar.IsotopeData_weight(self)


    def recept(self):
        """recept(IsotopeData self) -> double"""
        return _SinglePar.IsotopeData_recept(self)


    def electron(self):
        """electron(IsotopeData self) -> bool"""
        return _SinglePar.IsotopeData_electron(self)


    def rel_freq(self):
        """rel_freq(IsotopeData self) -> double"""
        return _SinglePar.IsotopeData_rel_freq(self)


    def printStrings(self, hdr=True):
        """
        printStrings(IsotopeData self, bool hdr=True) -> std::vector< std::string,std::allocator< std::string > >
        printStrings(IsotopeData self) -> std::vector< std::string,std::allocator< std::string > >
        """
        return _SinglePar.IsotopeData_printStrings(self, hdr)



    def __str__(self):
        """Prints out isotope data"""

        sss = ""
        sss += "qn: "          + str(self.qn()) + "\n"
        sss += "HS: "          + str(self.HS()) + "\n"
        sss += "momentum: "    + str(self.momentum()) + "\n"
        sss += "symbol: "      + str(self.symbol()) + "\n"
        sss += "name: "        + str(self.name()) + "\n"
        sss += "element: "     + str(self.element()) + "\n"
        sss += "number: "      + str(self.number()) + "\n"
        sss += "mass: "        + str(self.mass()) + "\n"
        sss += "weight: "      + str(self.weight()) + "\n"
        sss += "receptivity: " + str(self.recept()) + "\n"
        sss += "electron: "    + str(self.electron()) + "\n"
        sss += "rel freq: "    + str(self.rel_freq()) + "\n"

        return (sss)



IsotopeData_swigregister = _SinglePar.IsotopeData_swigregister
IsotopeData_swigregister(IsotopeData)
PIx2 = cvar.PIx2
DEG2RAD = cvar.DEG2RAD
RAD2DEG = cvar.RAD2DEG
HZ2RAD = cvar.HZ2RAD
RAD2HZ = cvar.RAD2HZ
HZ2GAUSS = cvar.HZ2GAUSS
GAUSS2HZ = cvar.GAUSS2HZ
GHZ2GAUSS = cvar.GHZ2GAUSS
GAUSS2GHZ = cvar.GAUSS2GHZ
MU_E = cvar.MU_E
BOHRMAG = cvar.BOHRMAG
GFREE = cvar.GFREE
GAMMAe = cvar.GAMMAe
GAMMA1H = cvar.GAMMA1H
DEFISO = cvar.DEFISO
PLANCK = cvar.PLANCK
HBAR = cvar.HBAR


def cutWhite(Sinp):
    """cutWhite(std::string & Sinp) -> std::string"""
    return _SinglePar.cutWhite(Sinp)

def cutString(Sinp, xwhite=True):
    """
    cutString(std::string & Sinp, bool xwhite=True) -> std::string
    cutString(std::string & Sinp) -> std::string
    """
    return _SinglePar.cutString(Sinp, xwhite)

def cutParBlks(Sinp):
    """cutParBlks(std::string & Sinp) -> std::string"""
    return _SinglePar.cutParBlks(Sinp)

def cutBlksXBlks(Sinp, X, xwhite=True):
    """
    cutBlksXBlks(std::string & Sinp, std::string const & X, bool xwhite=True) -> std::string
    cutBlksXBlks(std::string & Sinp, std::string const & X) -> std::string
    """
    return _SinglePar.cutBlksXBlks(Sinp, X, xwhite)

def cutDouble(Sinp, xwhite=True):
    """
    cutDouble(std::string & Sinp, bool xwhite=True) -> std::string
    cutDouble(std::string & Sinp) -> std::string
    """
    return _SinglePar.cutDouble(Sinp, xwhite)

def cutInt(Sinp, xwhite=True):
    """
    cutInt(std::string & Sinp, bool xwhite=True) -> std::string
    cutInt(std::string & Sinp) -> std::string
    """
    return _SinglePar.cutInt(Sinp, xwhite)

def Gitoa(i):
    """Gitoa(int i) -> std::string"""
    return _SinglePar.Gitoa(i)

def Gdec2(li):
    """Gdec2(long li) -> std::string"""
    return _SinglePar.Gdec2(li)

def Gdec(*args):
    """
    Gdec(int i) -> std::string
    Gdec(std::string const & fmt, int i) -> std::string
    Gdec(int i, int digs) -> std::string
    """
    return _SinglePar.Gdec(*args)

def Gform(*args):
    """
    Gform(std::string const & fmt, double d) -> std::string
    Gform(std::string const & fmt, int i) -> std::string
    """
    return _SinglePar.Gform(*args)

def CenterString(str, width=80):
    """
    CenterString(std::string const & str, int width=80) -> std::string
    CenterString(std::string const & str) -> std::string
    """
    return _SinglePar.CenterString(str, width)
# This file is compatible with both classic and new-style classes.


